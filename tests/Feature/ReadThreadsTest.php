<?php

namespace Tests\Feature;

use Tests\TestCase;
use Illuminate\Foundation\Testing\WithoutMiddleware;
use Illuminate\Foundation\Testing\DatabaseMigrations;
use Illuminate\Foundation\Testing\DatabaseTransactions;

class ReadThreadsTest extends TestCase
{
    /**
     * A basic test example.
     *
     * @return void
     */
    use DatabaseMigrations;

    public function setUp()
    {
        //调用工厂创建Thread模型数据
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->thread = factory('App\Thread')->create();
    }

    public function test_a_user_can_browse_threads()
    {
        //测试标题数据
        $this->get('/threads')
            ->assertSee($this->thread->title);
    }

    public function test_a_user_can_read_a_single_thread()
    {
        //测试单个话题
         $this->get($this->thread->path())
            ->assertSee($this->thread->title);
    }

    public function test_a_user_can_read_replies_that_are_associated_with_a_thread()
    {
        //如果存在thread
        //并且该Thread拥有回复
        $reply = factory('App\Reply')
            ->create(['thread_id' => $this->thread->id]);
        //那么当我们看该Thread时
        //我们也要看到回复
        $this->get($this->thread->path())
            ->assertSee($reply->body);
    }

    public function test_a_user_can_filter_threads_according_to_a_channel()
    {
        $channel = create('App\Channel');
        $threadInChannel = create('App\Thread',['channel_id' => $channel->id]);
        $threadNotInChannel = create('App\Thread');

        $this->get('/threads/'.$channel->slug)
            ->assertSee($threadInChannel->title)
            ->assertDontSee($threadNotInChannel->title);
    }

    public function test_a_user_can_filter_threads_by_any_username()
    {
        $this->signIn(create('App\User',['name' => 'ljx']));

        $threadByNoNo1 = create('App\Thread',['user_id' => auth()->id()]);
        $threadNotByNoNo1 = create('App\Thread');

        $this->get('threads?by=ljx')
            ->assertSee($threadByNoNo1->title)
            ->assertDontSee($threadNotByNoNo1->title);
    }

    public function test_a_user_can_filter_threads_by_popularity()
    {
        //三个话题
        //分别有两个回复，3个回复，0个回复
        $threadWithTwoReplies = create('App\Thread');
        create('App\Reply',['thread_id'=>$threadWithTwoReplies->id],2);

        $threadWithThreeReplies = create('App\Thread');
        create('App\Reply',['thread_id'=>$threadWithThreeReplies->id],3);

        //筛选话题通过回复数
        $response = $this->getJson('threads?popularity=1')->json();

        //返回最多回复数

        $this->assertEquals([3,2,0],array_column($response,'replies_count'));
    }
}
